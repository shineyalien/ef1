generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                         String           @id @default(cuid())
  email                      String           @unique
  password                   String
  firstName                  String
  lastName                   String
  isActive                   Boolean          @default(true)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  subscriptionPlan           SubscriptionPlan @default(FREE)
  country                    String           @default("Pakistan")
  phoneNumber                String?
  emailNotifications         Boolean          @default(true)
  fbrSubmissionNotifications Boolean          @default(true)
  invoiceNotifications       Boolean          @default(true)
  marketingEmails            Boolean          @default(false)
  accounts                   Account[]
  businesses                 Business[]
  sessions                   Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Business {
  id                       String          @id @default(cuid())
  userId                   String
  companyName              String
  ntnNumber                String          @unique
  address                  String
  province                 String
  businessType             String
  sector                   String
  fbrSetupComplete         Boolean         @default(false)
  fbrSetupSkipped          Boolean         @default(false)
  integrationMode          IntegrationMode @default(LOCAL)
  sandboxValidated         Boolean         @default(false)
  sandboxToken             String?
  productionToken          String?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  productionTokenAvailable Boolean         @default(false)
  sellerCity               String?
  sellerContact            String?
  sellerEmail              String?
  posId                    String?
  electronicSoftwareRegNo  String?
  fbrIntegratorLicenseNo   String?
  defaultPaymentTerms      String?
  footerText               String?
  invoicePrefix            String          @default("INV")
  lastTokenValidation      DateTime?
  logoUrl                  String?
  productionTokenValidated Boolean         @default(false)
  sandboxTokenValidated    Boolean         @default(false)
  defaultCurrency          String          @default("PKR")
  defaultScenario          String?
  invoiceTemplate          String          @default("default")
  primaryColor             String?
  secondaryColor           String?
  taxIdLabel               String?
  user                     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers                Customer[]
  invoices                 Invoice[]
  products                 Product[]

  @@map("businesses")
}

model Customer {
  id               String           @id @default(cuid())
  businessId       String
  name             String
  email            String?
  phone            String?
  address          String?
  ntnNumber        String?
  registrationType RegistrationType @default(UNREGISTERED)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  buyerType        String?
  buyerNTN         String?
  buyerCNIC        String?
  buyerPassport    String?
  buyerCity        String?
  buyerProvince    String?
  buyerContact     String?
  buyerEmail       String?
  business         Business         @relation(fields: [businessId], references: [id], onDelete: Cascade)
  invoices         Invoice[]

  @@map("customers")
}

model Product {
  id                  String        @id @default(cuid())
  businessId          String
  name                String
  description         String?
  hsCode              String
  unitOfMeasurement   String
  unitPrice           Float
  taxRate             Float         @default(18)
  category            String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  isActive            Boolean       @default(true)
  fbrSaleType         String?
  serialNumber        String?
  hsCodeDescription   String?
  transactionType     String?
  transactionTypeDesc String?
  rateId              String?
  rateDescription     String?
  sroNo               String?
  sroItemSerialNo     String?
  invoiceItems        InvoiceItem[]
  business            Business      @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@map("products")
}

model Invoice {
  id                   String          @id @default(cuid())
  businessId           String
  customerId           String?
  subtotal             Float
  taxAmount            Float
  totalAmount          Float
  status               InvoiceStatus   @default(DRAFT)
  mode                 IntegrationMode @default(LOCAL)
  fbrSubmitted         Boolean         @default(false)
  fbrValidated         Boolean         @default(false)
  submissionTimestamp  DateTime?
  fbrInvoiceNumber     String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  invoiceNumber        String
  invoiceSequence      Int
  qrCode               String?
  qrCodeData           String?
  invoiceDate          DateTime
  dueDate              DateTime?
  documentType         String          @default("Sale Invoice")
  scenarioId           String?
  referenceInvoiceNo   String?
  paymentMode          String          @default("1")
  taxPeriod            String?
  fbrResponse          Json?
  fbrResponseData      String?
  fbrTimestamp         DateTime?
  fbrTransactionId     String?
  fbrErrorCode         String?
  fbrErrorMessage      String?
  totalBillAmount      Float?
  totalQuantity        Float?
  totalDiscount        Float?          @default(0)
  totalSalesTax        Float?          @default(0)
  totalWithholdingTax  Float?          @default(0)
  totalExtraTax        Float?          @default(0)
  totalFurtherTax      Float?          @default(0)
  totalFED             Float?          @default(0)
  isOfflineInvoice     Boolean         @default(false)
  offlineCreatedAt     DateTime?
  syncedAt             DateTime?
  notes                String?
  lastRetryAt          DateTime?
  maxRetries           Int             @default(3)
  nextRetryAt          DateTime?
  retryCount           Int             @default(0)
  retryEnabled         Boolean         @default(true)
  retryProcessing      Boolean         @default(false)
  retryProcessingSince DateTime?
  fbrBuyerAddress      String?
  fbrBuyerCNIC         String?
  fbrBuyerCity         String?
  fbrBuyerContact      String?
  fbrBuyerEmail        String?
  fbrBuyerNTN          String?
  fbrBuyerPassport     String?
  fbrBuyerProvince     String?
  fbrBuyerType         String?
  items                InvoiceItem[]
  business             Business        @relation(fields: [businessId], references: [id], onDelete: Cascade)
  customer             Customer?       @relation(fields: [customerId], references: [id])

  @@index([businessId, status])
  @@index([fbrInvoiceNumber])
  @@index([invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id                              String   @id @default(cuid())
  invoiceId                       String
  productId                       String?
  itemCode                        String?
  description                     String
  hsCode                          String
  quantity                        Float
  unitOfMeasurement               String
  unitPrice                       Float
  saleValue                       Float
  discount                        Float    @default(0)
  valueSalesExcludingST           Float
  fbrSaleType                     String?
  taxRate                         Float
  salesTaxApplicable              Float    @default(0)
  taxCharged                      Float?
  taxAmount                       Float
  salesTaxWithheldAtSource        Float    @default(0)
  extraTax                        Float    @default(0)
  furtherTax                      Float    @default(0)
  fedPayable                      Float    @default(0)
  sroScheduleNo                   String?
  sroItemSerialNo                 String?
  salesTaxAct                     String   @default("SALES TAX ACT, 1990")
  totalValue                      Float
  fixedNotifiedValueOrRetailPrice Float    @default(0)
  saleType                        String   @default("Standard")
  fbrRateDesc                     String?
  fbrRateId                       String?
  fbrTransactionTypeDesc          String?
  fbrTransactionTypeId            String?
  invoice                         Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  product                         Product? @relation(fields: [productId], references: [id])

  @@index([invoiceId])
  @@map("invoice_items")
}

model FBRProvince {
  id          String   @id @default(cuid())
  code        String   @unique
  name        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fbr_provinces")
}

model FBRHSCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fbr_hs_codes")
}

model FBRUnitOfMeasurement {
  id          String   @id @default(cuid())
  code        String
  hsCode      String?
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([code, hsCode])
  @@map("fbr_uom")
}

model FBRDocumentType {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fbr_document_types")
}

model FBRScenario {
  id           String   @id @default(cuid())
  code         String   @unique
  description  String
  isActive     Boolean  @default(true)
  businessType String?
  sector       String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  saleType     String?

  @@index([businessType, sector])
  @@map("fbr_scenarios")
}

model FBRBusinessScenarioMapping {
  id             String   @id @default(cuid())
  businessType   String
  industrySector String
  scenarioIds    String[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)

  @@index([businessType, industrySector])
  @@index([isActive])
  @@map("fbr_business_scenario_mappings")
}

model FBRPaymentMode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("fbr_payment_modes")
}

model FBRSaleTypeCode {
  id          String   @id @default(cuid())
  code        String
  hsCode      String?
  scenarioId  String?
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([code, hsCode, scenarioId])
  @@map("fbr_sale_type_codes")
}

model FBRTaxRate {
  id             String   @id @default(cuid())
  hsCode         String
  saleType       String
  sellerProvince String
  buyerProvince  String
  scenarioId     String
  rate           Float
  description    String
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([hsCode, saleType, sellerProvince, buyerProvince, scenarioId])
  @@map("fbr_tax_rates")
}

model FBRTransactionType {
  id            String   @id @default(cuid())
  transTypeId   Int      @unique
  transTypeDesc String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("fbr_transaction_types")
}

model FBRSROSchedule {
  id          String   @id @default(cuid())
  scheduleNo  String
  scenarioId  String?
  hsCode      String?
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([scheduleNo, scenarioId, hsCode])
  @@map("fbr_sro_schedules")
}

model FBRSROItem {
  id            String   @id @default(cuid())
  itemSerialNo  String
  sroScheduleNo String
  description   String
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([itemSerialNo, sroScheduleNo])
  @@map("fbr_sro_items")
}

model FBRCacheMetadata {
  id           String   @id @default(cuid())
  lookupType   String   @unique
  lastSyncAt   DateTime
  recordCount  Int      @default(0)
  syncStatus   String   @default("pending")
  errorMessage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("fbr_cache_metadata")
}

enum SubscriptionPlan {
  FREE
  PROFESSIONAL
  ENTERPRISE
}

enum IntegrationMode {
  LOCAL
  SANDBOX
  PRODUCTION
}

enum RegistrationType {
  REGISTERED
  UNREGISTERED
}

enum InvoiceStatus {
  DRAFT
  SAVED
  SUBMITTED
  VALIDATED
  PUBLISHED
  FAILED
  CANCELLED
}
