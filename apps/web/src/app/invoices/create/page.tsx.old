'use client'

import { useState, useEffect, useCallback } from 'react'
import { useRouter } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { 
  Save, Send, Plus, Trash2, ArrowLeft, Home, 
  CheckCircle, AlertCircle, Loader2, Search 
} from 'lucide-react'
import Link from 'next/link'

interface InvoiceItem {
  id: string
  description: string
  hsCode: string
  quantity: number
  unitPrice: number
  unitOfMeasurement: string
  taxRate: number
  discount?: number
  valueSalesExcludingST: number
  salesTaxApplicable: number
  salesTaxWithheldAtSource: number
  extraTax: number
  furtherTax: number
  fedPayable: number
  totalValue: number
  saleType: string
  sroScheduleNo?: string
  sroItemSerialNo?: string
  fixedNotifiedValueOrRetailPrice?: number
}

interface Customer {
  id: string
  name: string
  registrationType: 'REGISTERED' | 'UNREGISTERED'
  ntnCnic?: string
  address: string
  province: string
  phoneNumber?: string
  email?: string
}

interface LookupData {
  provinces: Array<{ stateProvinceCode: number; stateProvinceDesc: string }>
  hsCodes: Array<{ hS_CODE: string; description: string }>
  uoms: Array<{ uoM_ID: number; description: string }>
  documentTypes: Array<{ docTypeId: number; docDescription: string }>
}

export default function CreateInvoicePage() {
  const router = useRouter()
  const { data: session, status } = useSession()
  
  // State management
  const [loading, setLoading] = useState(false)
  const [saving, setSaving] = useState(false)
  const [autoSaving, setAutoSaving] = useState(false)
  const [lastSaved, setLastSaved] = useState<Date | null>(null)
  const [error, setError] = useState('')
  const [success, setSuccess] = useState('')
  const [invoiceId, setInvoiceId] = useState<string | null>(null)
  
  // Lookup data
  const [lookupData, setLookupData] = useState<LookupData | null>(null)
  const [customers, setCustomers] = useState<Customer[]>([])
  const [customerSearch, setCustomerSearch] = useState('')
  const [filteredCustomers, setFilteredCustomers] = useState<Customer[]>([])
  
  // Invoice form data
  const [invoiceData, setInvoiceData] = useState({
    customerId: '',
    customerName: '',
    invoiceDate: new Date().toISOString().split('T')[0],
    dueDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    documentType: 'Sale Invoice',
    paymentMode: 'Cash',
    scenarioId: '',
    taxPeriod: new Date().toISOString().slice(0, 7), // YYYY-MM format
    invoiceRefNo: '', // For debit notes only
    notes: ''
  })
  
  const [items, setItems] = useState<InvoiceItem[]>([
    {
      id: crypto.randomUUID(),
      description: '',
      hsCode: '',
      quantity: 1,
      unitPrice: 0,
      unitOfMeasurement: 'Each',
      taxRate: 18,
      discount: 0,
      valueSalesExcludingST: 0,
      salesTaxApplicable: 0,
      salesTaxWithheldAtSource: 0,
      extraTax: 0,
      furtherTax: 0,
      fedPayable: 0,
      totalValue: 0,
      saleType: 'Standard',
      sroScheduleNo: '',
      sroItemSerialNo: '',
      fixedNotifiedValueOrRetailPrice: 0
    }
  ])

  // Redirect if not authenticated
  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/login')
    }
  }, [status, router])

  // Load lookup data and customers
  useEffect(() => {
    const loadData = async () => {
      try {
        setLoading(true)
        
        // Load FBR lookup data
        const lookupRes = await fetch('/api/fbr/lookup')
        if (lookupRes.ok) {
          const data = await lookupRes.json()
          setLookupData(data)
        }
        
        // Load customers
        const customersRes = await fetch('/api/customers')
        if (customersRes.ok) {
          const data = await customersRes.json()
          setCustomers(data.customers || [])
          setFilteredCustomers(data.customers || [])
        }
      } catch (error) {
        console.error('Error loading data:', error)
        setError('Failed to load required data')
      } finally {
        setLoading(false)
      }
    }
    
    if (status === 'authenticated') {
      loadData()
    }
  }, [status])

  // Auto-save functionality (every 30 seconds)
  useEffect(() => {
    if (!invoiceData.customerId || items.length === 0) return
    
    const autoSaveInterval = setInterval(() => {
      handleSave(true) // true = auto-save mode
    }, 30000) // 30 seconds
    
    return () => clearInterval(autoSaveInterval)
  }, [invoiceData, items, invoiceId])

  // Filter customers based on search
  useEffect(() => {
    if (customerSearch.trim() === '') {
      setFilteredCustomers(customers)
    } else {
      const searchLower = customerSearch.toLowerCase()
      setFilteredCustomers(
        customers.filter(c => 
          c.name.toLowerCase().includes(searchLower) ||
          c.ntnCnic?.toLowerCase().includes(searchLower) ||
          c.address.toLowerCase().includes(searchLower)
        )
      )
    }
  }, [customerSearch, customers])

  // Calculate item totals
  const calculateItemTotals = useCallback((item: InvoiceItem) => {
    const baseAmount = item.quantity * item.unitPrice
    const discountAmount = (baseAmount * (item.discount || 0)) / 100
    const valueSalesExcludingST = baseAmount - discountAmount
    
    const salesTaxApplicable = (valueSalesExcludingST * item.taxRate) / 100
    const salesTaxWithheldAtSource = (valueSalesExcludingST * 0) / 100 // Default 0%, can be configured
    const extraTax = (valueSalesExcludingST * 0) / 100 // Default 0%
    const furtherTax = (valueSalesExcludingST * 0) / 100 // Default 0%
    const fedPayable = item.fedPayable || 0
    
    const totalValue = valueSalesExcludingST + salesTaxApplicable + extraTax + furtherTax + fedPayable
    
    return {
      ...item,
      valueSalesExcludingST,
      salesTaxApplicable,
      salesTaxWithheldAtSource,
      extraTax,
      furtherTax,
      fedPayable,
      totalValue
    }
  }, [])

  // Update item
  const updateItem = (index: number, field: keyof InvoiceItem, value: any) => {
    const updatedItems = [...items]
    updatedItems[index] = {
      ...updatedItems[index],
      [field]: value
    }
    // Recalculate totals
    updatedItems[index] = calculateItemTotals(updatedItems[index])
    setItems(updatedItems)
  }

  // Add new item
  const addItem = () => {
    setItems([
      ...items,
      {
        id: crypto.randomUUID(),
        description: '',
        hsCode: '',
        quantity: 1,
        unitPrice: 0,
        unitOfMeasurement: 'Each',
        taxRate: 18,
        discount: 0,
        valueSalesExcludingST: 0,
        salesTaxApplicable: 0,
        salesTaxWithheldAtSource: 0,
        extraTax: 0,
        furtherTax: 0,
        fedPayable: 0,
        totalValue: 0,
        saleType: 'Standard'
      }
    ])
  }

  // Remove item
  const removeItem = (index: number) => {
    if (items.length > 1) {
      setItems(items.filter((_, i) => i !== index))
    }
  }

  // Calculate invoice totals
  const calculateTotals = () => {
    const subtotal = items.reduce((sum, item) => sum + item.valueSalesExcludingST, 0)
    const totalTax = items.reduce((sum, item) => sum + item.salesTaxApplicable, 0)
    const totalWithholdingTax = items.reduce((sum, item) => sum + item.salesTaxWithheldAtSource, 0)
    const totalExtraTax = items.reduce((sum, item) => sum + item.extraTax, 0)
    const totalFurtherTax = items.reduce((sum, item) => sum + item.furtherTax, 0)
    const totalFED = items.reduce((sum, item) => sum + item.fedPayable, 0)
    const grandTotal = items.reduce((sum, item) => sum + item.totalValue, 0)
    
    return {
      subtotal,
      totalTax,
      totalWithholdingTax,
      totalExtraTax,
      totalFurtherTax,
      totalFED,
      grandTotal
    }
  }

  // Save invoice (draft or auto-save)
  const handleSave = async (isAutoSave = false) => {
    try {
      if (isAutoSave) {
        setAutoSaving(true)
      } else {
        setSaving(true)
      }
      setError('')
      
      // Validate required fields
      if (!invoiceData.customerId) {
        throw new Error('Please select a customer')
      }
      
      if (items.length === 0 || items.every(item => !item.description)) {
        throw new Error('Please add at least one item')
      }
      
      const totals = calculateTotals()
      
      const payload = {
        id: invoiceId,
        customerId: invoiceData.customerId,
        invoiceDate: invoiceData.invoiceDate,
        dueDate: invoiceData.dueDate,
        documentType: invoiceData.documentType,
        paymentMode: invoiceData.paymentMode,
        scenarioId: invoiceData.scenarioId || undefined,
        taxPeriod: invoiceData.taxPeriod,
        invoiceRefNo: invoiceData.invoiceRefNo || undefined,
        notes: invoiceData.notes,
        subtotal: totals.subtotal,
        taxAmount: totals.totalTax,
        totalAmount: totals.grandTotal,
        totalWithholdingTax: totals.totalWithholdingTax,
        totalExtraTax: totals.totalExtraTax,
        totalFurtherTax: totals.totalFurtherTax,
        totalFED: totals.totalFED,
        status: 'SAVED', // Save as SAVED status (can be edited later)
        mode: 'LOCAL',
        items: items.map(item => ({
          description: item.description,
          hsCode: item.hsCode,
          quantity: item.quantity,
          unitPrice: item.unitPrice,
          unitOfMeasurement: item.unitOfMeasurement,
          taxRate: item.taxRate,
          discount: item.discount,
          valueSalesExcludingST: item.valueSalesExcludingST,
          salesTaxApplicable: item.salesTaxApplicable,
          salesTaxWithheldAtSource: item.salesTaxWithheldAtSource,
          extraTax: item.extraTax,
          furtherTax: item.furtherTax,
          fedPayable: item.fedPayable,
          totalValue: item.totalValue,
          saleType: item.saleType,
          sroScheduleNo: item.sroScheduleNo,
          sroItemSerialNo: item.sroItemSerialNo,
          fixedNotifiedValueOrRetailPrice: item.fixedNotifiedValueOrRetailPrice
        }))
      }
      
      const method = invoiceId ? 'PUT' : 'POST'
      const url = invoiceId ? `/api/invoices/${invoiceId}` : '/api/invoices'
      
      const response = await fetch(url, {
        method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to save invoice')
      }
      
      const data = await response.json()
      
      if (!invoiceId) {
        setInvoiceId(data.invoice.id)
      }
      
      setLastSaved(new Date())
      
      if (!isAutoSave) {
        setSuccess('Invoice saved successfully!')
        setTimeout(() => setSuccess(''), 3000)
      }
      
    } catch (error: any) {
      console.error('Save error:', error)
      if (!isAutoSave) {
        setError(error.message || 'Failed to save invoice')
      }
    } finally {
      if (isAutoSave) {
        setAutoSaving(false)
      } else {
        setSaving(false)
      }
    }
  }

  // Submit to FBR Sandbox
  const handleSubmitToSandbox = async () => {
    try {
      setSaving(true)
      setError('')
      
      // First save the invoice if not already saved
      if (!invoiceId) {
        await handleSave()
        if (!invoiceId) {
          throw new Error('Failed to save invoice before submission')
        }
      }
      
      // Submit to FBR sandbox
      const response = await fetch(`/api/invoices/${invoiceId}/submit`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ environment: 'sandbox' })
      })
      
      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'Failed to submit to FBR')
      }
      
      const data = await response.json()
      setSuccess(`Invoice submitted to FBR Sandbox! IRN: ${data.fbrInvoiceNumber}`)
      
      // Redirect to invoice list after 2 seconds
      setTimeout(() => {
        router.push('/invoices')
      }, 2000)
      
    } catch (error: any) {
      console.error('Submit error:', error)
      setError(error.message || 'Failed to submit to FBR')
    } finally {
      setSaving(false)
    }
  }

  const totals = calculateTotals()

  if (status === 'loading' || loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-blue-600 mx-auto mb-4" />
          <p className="text-gray-600">Loading invoice form...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <main className="container mx-auto p-6 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Link href="/invoices">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Invoices
              </Button>
            </Link>
            <Link href="/dashboard">
              <Button variant="outline" size="sm">
                <Home className="h-4 w-4 mr-2" />
                Dashboard
              </Button>
            </Link>
          </div>
          <div className="flex items-center space-x-2">
            {autoSaving && (
              <span className="text-sm text-gray-500 flex items-center">
                <Loader2 className="h-3 w-3 animate-spin mr-1" />
                Auto-saving...
              </span>
            )}
            {lastSaved && !autoSaving && (
              <span className="text-sm text-gray-500">
                Last saved: {lastSaved.toLocaleTimeString()}
              </span>
            )}
          </div>
        </div>

        {/* Page Title */}
        <div className="mb-6">
          <h1 className="text-3xl font-bold text-gray-900">
            {invoiceId ? 'Edit Invoice' : 'Create New Invoice'}
          </h1>
          <p className="text-gray-600 mt-1">
            All fields marked with <span className="text-red-500">*</span> are required for FBR compliance
          </p>
        </div>

        {/* Alerts */}
        {error && (
          <Alert className="mb-6 bg-red-50 border-red-200">
            <AlertCircle className="h-4 w-4 text-red-600" />
            <AlertDescription className="text-red-800">{error}</AlertDescription>
          </Alert>
        )}

        {success && (
          <Alert className="mb-6 bg-green-50 border-green-200">
            <CheckCircle className="h-4 w-4 text-green-600" />
            <AlertDescription className="text-green-800">{success}</AlertDescription>
          </Alert>
        )}

        {/* Invoice Form */}
        <div className="space-y-6">
          {/* Customer Selection */}
          <Card>
            <CardHeader>
              <CardTitle>Customer Information <span className="text-red-500">*</span></CardTitle>
              <CardDescription>Select or add a customer for this invoice</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="customer-search">Search Customer</Label>
                <div className="flex space-x-2">
                  <div className="flex-1 relative">
                    <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                    <Input
                      id="customer-search"
                      placeholder="Search by name, NTN, or address..."
                      value={customerSearch}
                      onChange={(e) => setCustomerSearch(e.target.value)}
                      className="pl-10"
                    />
                  </div>
                  <Link href="/customers/new">
                    <Button type="button" variant="outline">
                      <Plus className="h-4 w-4 mr-2" />
                      New Customer
                    </Button>
                  </Link>
                </div>
              </div>

              {filteredCustomers.length > 0 && (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3 max-h-60 overflow-y-auto">
                  {filteredCustomers.map((customer) => (
                    <button
                      key={customer.id}
                      type="button"
                      onClick={() => {
                        setInvoiceData({
                          ...invoiceData,
                          customerId: customer.id,
                          customerName: customer.name
                        })
                        setCustomerSearch('')
                      }}
                      className={`p-4 border rounded-lg text-left transition-all ${
                        invoiceData.customerId === customer.id
                          ? 'border-blue-500 bg-blue-50'
                          : 'border-gray-200 hover:border-blue-300'
                      }`}
                    >
                      <div className="font-medium text-gray-900">{customer.name}</div>
                      <div className="text-sm text-gray-600">{customer.ntnCnic}</div>
                      <div className="text-xs text-gray-500 mt-1">{customer.address}</div>
                    </button>
                  ))}
                </div>
              )}

              {invoiceData.customerId && (
                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                  <div className="flex items-center">
                    <CheckCircle className="h-5 w-5 text-green-600 mr-2" />
                    <span className="font-medium text-green-900">
                      Selected: {invoiceData.customerName}
                    </span>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Invoice Details */}
          <Card>
            <CardHeader>
              <CardTitle>Invoice Details</CardTitle>
              <CardDescription>Basic invoice information</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div>
                  <Label htmlFor="invoice-date">Invoice Date <span className="text-red-500">*</span></Label>
                  <Input
                    id="invoice-date"
                    type="date"
                    value={invoiceData.invoiceDate}
                    onChange={(e) => setInvoiceData({ ...invoiceData, invoiceDate: e.target.value })}
                  />
                </div>

                <div>
                  <Label htmlFor="due-date">Due Date</Label>
                  <Input
                    id="due-date"
                    type="date"
                    value={invoiceData.dueDate}
                    onChange={(e) => setInvoiceData({ ...invoiceData, dueDate: e.target.value })}
                  />
                </div>

                <div>
                  <Label htmlFor="document-type">Document Type <span className="text-red-500">*</span></Label>
                  <Select
                    value={invoiceData.documentType}
                    onValueChange={(value) => setInvoiceData({ ...invoiceData, documentType: value })}
                  >
                    <SelectTrigger id="document-type">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Sale Invoice">Sale Invoice</SelectItem>
                      <SelectItem value="Debit Note">Debit Note</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="payment-mode">Payment Mode <span className="text-red-500">*</span></Label>
                  <Select
                    value={invoiceData.paymentMode}
                    onValueChange={(value) => setInvoiceData({ ...invoiceData, paymentMode: value })}
                  >
                    <SelectTrigger id="payment-mode">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="Cash">Cash</SelectItem>
                      <SelectItem value="Credit">Credit</SelectItem>
                      <SelectItem value="Bank Transfer">Bank Transfer</SelectItem>
                      <SelectItem value="Cheque">Cheque</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="tax-period">Tax Period <span className="text-red-500">*</span></Label>
                  <Input
                    id="tax-period"
                    type="month"
                    value={invoiceData.taxPeriod}
                    onChange={(e) => setInvoiceData({ ...invoiceData, taxPeriod: e.target.value })}
                  />
                </div>

                {invoiceData.documentType === 'Debit Note' && (
                  <div>
                    <Label htmlFor="invoice-ref">Reference Invoice No <span className="text-red-500">*</span></Label>
                    <Input
                      id="invoice-ref"
                      placeholder="22/28 digit reference"
                      value={invoiceData.invoiceRefNo}
                      onChange={(e) => setInvoiceData({ ...invoiceData, invoiceRefNo: e.target.value })}
                    />
                  </div>
                )}
              </div>
            </CardContent>
          </Card>

          {/* Line Items */}
          <Card>
            <CardHeader>
              <CardTitle>Line Items <span className="text-red-500">*</span></CardTitle>
              <CardDescription>Add products or services to this invoice</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {items.map((item, index) => (
                <div key={item.id} className="p-4 border border-gray-200 rounded-lg space-y-4">
                  <div className="flex justify-between items-start">
                    <h4 className="font-medium text-gray-900">Item {index + 1}</h4>
                    {items.length > 1 && (
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={() => removeItem(index)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    )}
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div className="lg:col-span-2">
                      <Label>Description <span className="text-red-500">*</span></Label>
                      <Input
                        placeholder="Product or service description"
                        value={item.description}
                        onChange={(e) => updateItem(index, 'description', e.target.value)}
                      />
                    </div>

                    <div>
                      <Label>HS Code <span className="text-red-500">*</span></Label>
                      <Input
                        placeholder="e.g., 8523.4990"
                        value={item.hsCode}
                        onChange={(e) => updateItem(index, 'hsCode', e.target.value)}
                      />
                    </div>

                    <div>
                      <Label>Quantity <span className="text-red-500">*</span></Label>
                      <Input
                        type="number"
                        min="0"
                        step="0.01"
                        value={item.quantity}
                        onChange={(e) => updateItem(index, 'quantity', parseFloat(e.target.value) || 0)}
                      />
                    </div>

                    <div>
                      <Label>Unit Price <span className="text-red-500">*</span></Label>
                      <Input
                        type="number"
                        min="0"
                        step="0.01"
                        value={item.unitPrice}
                        onChange={(e) => updateItem(index, 'unitPrice', parseFloat(e.target.value) || 0)}
                      />
                    </div>

                    <div>
                      <Label>Unit of Measurement</Label>
                      <Select
                        value={item.unitOfMeasurement}
                        onValueChange={(value) => updateItem(index, 'unitOfMeasurement', value)}
                      >
                        <SelectTrigger>
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="Each">Each</SelectItem>
                          <SelectItem value="KG">Kilogram</SelectItem>
                          <SelectItem value="Meter">Meter</SelectItem>
                          <SelectItem value="Liter">Liter</SelectItem>
                          <SelectItem value="Service">Service</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>Tax Rate (%)</Label>
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        step="0.01"
                        value={item.taxRate}
                        onChange={(e) => updateItem(index, 'taxRate', parseFloat(e.target.value) || 0)}
                      />
                    </div>

                    <div>
                      <Label>Discount (%)</Label>
                      <Input
                        type="number"
                        min="0"
                        max="100"
                        step="0.01"
                        value={item.discount || 0}
                        onChange={(e) => updateItem(index, 'discount', parseFloat(e.target.value) || 0)}
                      />
                    </div>

                    <div>
                      <Label>FED Payable</Label>
                      <Input
                        type="number"
                        min="0"
                        step="0.01"
                        value={item.fedPayable}
                        onChange={(e) => updateItem(index, 'fedPayable', parseFloat(e.target.value) || 0)}
                      />
                    </div>
                  </div>

                  {/* Item Totals */}
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-3 text-sm bg-gray-50 p-3 rounded">
                    <div>
                      <span className="text-gray-600">Base Amount:</span>
                      <div className="font-medium">Rs. {item.valueSalesExcludingST.toFixed(2)}</div>
                    </div>
                    <div>
                      <span className="text-gray-600">Tax Amount:</span>
                      <div className="font-medium">Rs. {item.salesTaxApplicable.toFixed(2)}</div>
                    </div>
                    <div>
                      <span className="text-gray-600">FED:</span>
                      <div className="font-medium">Rs. {item.fedPayable.toFixed(2)}</div>
                    </div>
                    <div>
                      <span className="text-gray-600">Total:</span>
                      <div className="font-bold text-blue-600">Rs. {item.totalValue.toFixed(2)}</div>
                    </div>
                  </div>
                </div>
              ))}

              <Button type="button" variant="outline" onClick={addItem} className="w-full">
                <Plus className="h-4 w-4 mr-2" />
                Add Another Item
              </Button>
            </CardContent>
          </Card>

          {/* Invoice Totals */}
          <Card>
            <CardHeader>
              <CardTitle>Invoice Summary</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                <div className="flex justify-between text-gray-700">
                  <span>Subtotal (Excluding Tax):</span>
                  <span className="font-medium">Rs. {totals.subtotal.toFixed(2)}</span>
                </div>
                <div className="flex justify-between text-gray-700">
                  <span>Sales Tax:</span>
                  <span className="font-medium">Rs. {totals.totalTax.toFixed(2)}</span>
                </div>
                {totals.totalWithholdingTax > 0 && (
                  <div className="flex justify-between text-gray-700">
                    <span>Withholding Tax:</span>
                    <span className="font-medium">Rs. {totals.totalWithholdingTax.toFixed(2)}</span>
                  </div>
                )}
                {totals.totalExtraTax > 0 && (
                  <div className="flex justify-between text-gray-700">
                    <span>Extra Tax:</span>
                    <span className="font-medium">Rs. {totals.totalExtraTax.toFixed(2)}</span>
                  </div>
                )}
                {totals.totalFurtherTax > 0 && (
                  <div className="flex justify-between text-gray-700">
                    <span>Further Tax:</span>
                    <span className="font-medium">Rs. {totals.totalFurtherTax.toFixed(2)}</span>
                  </div>
                )}
                {totals.totalFED > 0 && (
                  <div className="flex justify-between text-gray-700">
                    <span>Federal Excise Duty:</span>
                    <span className="font-medium">Rs. {totals.totalFED.toFixed(2)}</span>
                  </div>
                )}
                <div className="pt-3 border-t border-gray-200">
                  <div className="flex justify-between text-lg font-bold text-gray-900">
                    <span>Grand Total:</span>
                    <span className="text-blue-600">Rs. {totals.grandTotal.toFixed(2)}</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Notes */}
          <Card>
            <CardHeader>
              <CardTitle>Additional Notes</CardTitle>
            </CardHeader>
            <CardContent>
              <Textarea
                placeholder="Add any additional notes or comments..."
                value={invoiceData.notes}
                onChange={(e) => setInvoiceData({ ...invoiceData, notes: e.target.value })}
                rows={4}
              />
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex justify-end space-x-4">
            <Link href="/invoices">
              <Button type="button" variant="outline">
                Cancel
              </Button>
            </Link>
            <Button
              type="button"
              variant="outline"
              onClick={() => handleSave(false)}
              disabled={saving || autoSaving}
            >
              {saving ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Saving...
                </>
              ) : (
                <>
                  <Save className="h-4 w-4 mr-2" />
                  Save Draft
                </>
              )}
            </Button>
            <Button
              type="button"
              onClick={handleSubmitToSandbox}
              disabled={saving || autoSaving || !invoiceData.customerId}
            >
              {saving ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Submitting...
                </>
              ) : (
                <>
                  <Send className="h-4 w-4 mr-2" />
                  Submit to FBR Sandbox
                </>
              )}
            </Button>
          </div>
        </div>
      </main>
    </div>
  )
}
